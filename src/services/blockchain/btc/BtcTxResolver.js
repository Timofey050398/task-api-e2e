import * as bitcoin from "bitcoinjs-lib";

export class BtcTxResolver {
    constructor(btcService) {
        this.btcService = btcService;
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –µ—ë txid.
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç { isTxSuccess, receiver, receiveAmount }.
     *
     * receiveAmount ‚Äî –≤ BTC, –Ω–µ –≤ —Å–∞—Ç–æ—à–∏.
     */
    async getTx(txid) {
        if (!txid) throw new Error("[BTC] getTx: txid is required");

        try {
            const raw = await this.btcService.txProvider(txid);
            const status = await this.btcService.statusProvider(txid);
            const isTxSuccess =
                typeof status === "boolean"
                    ? status
                    : status?.confirmed === true ||
                    status?.status === "confirmed" ||
                    status?.status === "success";

            let receiver = null;
            let receiveAmount = 0;

            // üëá –µ—Å–ª–∏ txProvider –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç raw hex
            if (typeof raw === "string") {
                const tx = bitcoin.Transaction.fromBuffer(Buffer.from(raw, "hex"));

                // –í raw hex –º—ã –Ω–µ –º–æ–∂–µ–º –¥–æ—Å—Ç–∞—Ç—å –∞–¥—Ä–µ—Å–∞ –∏–∑ –≤—Ö–æ–¥–æ–≤ –±–µ–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.
                // –ü–æ—ç—Ç–æ–º—É –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π –¥–µ–∫–æ–¥–∏—Ä—É–µ–º—ã–π –≤—ã—Ö–æ–¥ —Å –Ω–µ–Ω—É–ª–µ–≤–æ–π —Å—É–º–º–æ–π.
                for (const out of tx.outs) {
                    const sat = out.value || 0;
                    if (sat <= 0) continue;
                    try {
                        receiver = bitcoin.address.fromOutputScript(out.script, this.btcService.bitcoinNetwork);
                        receiveAmount = sat / 1e8;
                        break;
                    } catch {}
                }
            }
            // üëá –µ—Å–ª–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON (Blockstream REST)
            else {
                const inputs = raw.vin || raw.inputs || [];
                const outputs = raw.vout || raw.outputs || [];

                // –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π
                const senderAddrs = new Set();
                for (const vin of inputs) {
                    const addr =
                        vin.prevout?.scriptpubkey_address ||
                        vin.address ||
                        vin.scriptSig?.addresses?.[0] ||
                        null;
                    if (addr) senderAddrs.add(addr);
                }

                // –ò—â–µ–º –≤—ã—Ö–æ–¥, —á–µ–π –∞–¥—Ä–µ—Å –Ω–µ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —Å—Ä–µ–¥–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π
                for (const out of outputs) {
                    const sat =
                        typeof out.value === "number"
                            ? out.value
                            : typeof out.scriptpubkey_value === "number"
                                ? out.scriptpubkey_value
                                : 0;
                    if (sat <= 0) continue;

                    const addr =
                        out.scriptpubkey_address ||
                        out.address ||
                        out.scriptPubKey?.addresses?.[0] ||
                        out.addresses?.[0] ||
                        out.scriptpubkey_addresses?.[0] ||
                        null;
                    if (!addr) continue;

                    // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã—Ö–æ–¥—ã –Ω–∞ –∞–¥—Ä–µ—Å–∞, —É—á–∞—Å—Ç–≤–æ–≤–∞–≤—à–∏–µ –≤–æ –≤—Ö–æ–¥–∞—Ö (change/self-send)
                    if (senderAddrs.has(addr)) continue;

                    receiver = addr;
                    receiveAmount = sat / 1e8;
                    break;
                }

                // fallback: –µ—Å–ª–∏ –≤—Å–µ —Å–æ–≤–ø–∞–ª–∏ ‚Äî –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π –Ω–µ–Ω—É–ª–µ–≤–æ–π –≤—ã—Ö–æ–¥
                if (!receiver && outputs.length > 0) {
                    for (const out of outputs) {
                        const sat =
                            typeof out.value === "number"
                                ? out.value
                                : typeof out.scriptpubkey_value === "number"
                                    ? out.scriptpubkey_value
                                    : 0;
                        if (sat <= 0) continue;
                        const addr =
                            out.scriptpubkey_address ||
                            out.address ||
                            out.scriptPubKey?.addresses?.[0] ||
                            out.addresses?.[0] ||
                            out.scriptpubkey_addresses?.[0] ||
                            null;
                        if (addr) {
                            receiver = addr;
                            receiveAmount = sat / 1e8;
                            break;
                        }
                    }
                }
            }

            return { isTxSuccess, receiver, receiveAmount };
        } catch (error) {
            this.btcService.logger?.error?.("[BTC] getTx failed", { txid, error });
            throw error;
        }
    }


}